######
#   This file is a reduced spec. Lots of functionality has been removed, to get us closer to an mvp
######

######
#   List of Objects:
#
#       FrameStream:    a sequence of frames
#       Encoder:        an x264 encoder
#       RawData:        a bunch of 1s and 0s
#       String:         usually a filename
#                                           
######

######
#   List of predefined functions
#       ffmpegDecode:   ffmpegDecode(input, output)
#                           input: is a filename (as a String)
#                           output: a FrameStream
#
#       x264Encode:					x264Encode(parameters, input, output)
#                           parameters is a string, containing x264 parameters
#                           input is a FrameStream, which will be piped to x264
#                           output is a string, which is a filename
#                                           
#       splineResize:   splineResize(height, width, input, output)
#                           height:   an int
#                           width:    an int
#                           input:    a FrameStream
#                           output:   a FrameStream
#                           
#       pixelCrop:      pixelCrop(left, top, right, bottom, input, output)
#                           left:     how many pixels to remove from the left border (int)
#                           top:      how many pixels to remove from the top border (int)
#                           right:    how many pixels to remove from the right border (int)
#                           bottom:   how many pixels to remove from the bottom border (int)
#                           input:    a FrameStream
#                           output:   a FrameStream
#
#       getFrameRange:  getFrameRange(start, end, input, output)
#                           start:    the first frame
#                           end:      the last frame
#                           input:    a FrameStream
#                           output:   a FrameStream
#                           
#                           Note:
#                               getFrameRange will return a FrameStream comprising only of the
#                           frames between start and end (inclusive)
#
######

######
#   Multi-Output Detection
#
#       For memeory management purposes, as soon as a frame is no longer needed it must be discarded.
#       But if something like resizedVideo is used as input for 2 different filters, then resizedVideo
#       cannot be thrown away when the first filter has finished with it. This is something that will
#       most likely be handled by the core program. I'm not exactly sure where to draw the line between
#       what the parser does and what the core program does, but it should be sufficient for the parser
#       to simply note when a new object is being created and what filters are acting upon it.
#
######

###### Example code: ######

# You have to decode a video before you can process it
# since originalVideo does not exist, it will automatically be created
ffmpegDecode("filters/test.mp4", originalVideo);

# resizedVideo does not exist, so it will be created
splineResize(400, 400, originalVideo, resizedVideo);
# also valid would be splineResize(400, 400, originalVideo, originalVideo);

# crop 10 pixels off of each border of the resized video
pixelCrop(10, 10, 10, 10, resizedVideo, croppedResizedVideo);

# throw away all frames that aren't between 2500 and 6500 (inclusive)
getFrameRange(2500, 6500, croppedResizedVideo, truncatedCroppedResizedVideo);

# encode the video, for now x264 will just save directly to disk
x264Encode("--preset placebo", truncatedCroppedResizedVideo, "/home/testEncodes/test1.mkv");

###### End ######


######
#   What the interpreter should do:
#
#   1. signal creation of ffmpegDecoder1,
#      giving the filename for input
#
#   2. signal creation of splineResize1 thread,
#      giving ffmpegDecode1 for input
#
#   3. signal creation of pixelCrop1,
#      giving splineResize1 for input
#
#   4. signal creation of getFrameRange1 thread,
#      giving pixelCrop1 for input
#
#   5. create x264 process with appropriate parameters.
#      like with ffmpeg, it can't work exactly like a normal
#      filter because it's very complex and already has a way
#      that it does things. The core program will probably be
#      the piece worrying about this, but the output of
#      pixelCrop1 will have to be piped to an x264 process.
#
#   If there was a second splineResize somewhere in there, it
#   would have been 'signal creation of SplineResize2...'
#
#   The interpreter just needs to make sure that each object
#   separately represented in the control program, so if there
#   are two splineResizes, each has its own incarnation with the
#   correct inputs and outputs.
#
#   If an object has no output, then the interpreter ignores it
#   If that object's parent was only outputting to the one place,
#   the parent is ignored. And so on.
#
#   The central program will worry about memory management
#   and filters with multiple outputs, depending if a single
#   incarnation of an object has multiple entities pointing
#   to it as input.
#
#   The mvp does not support filters that take inputs from
#   multiple outputs. That's a feature for later.
#
#   Obviously the whole program is in the process of a rewrite,
#   so there isn't currently any way to do the signaling.
#
######
